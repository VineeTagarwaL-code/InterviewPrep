q1) Linked list cycle 

description :- 
Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

link :- 
https://leetcode.com/problems/linked-list-cycle/

solution :-

bool hasCycle(struct ListNode *head) {
    struct ListNode *fast = head ;
    struct ListNode *slow = head ;

    while(fast != NULL && fast->next != NULL  ){
        fast = fast->next->next;
        slow = slow->next;

        if(fast == slow){
            return true;
        } 
    }
       return false;
}


q2) calculat the length of linked list cycle 

we just have to find the lenght of linked list cycle , we can use the fast and slow pointer method for this, after fast==slow then we can run the slow pointer one step ahead every iteratin and countit 
until it meets the fast pointer again 


solution:

int lengthOfCycle(struct ListNode *head) {
    struct ListNode *fast = head ;
    struct ListNode *slow = head ;
   int counter=0;
    while(fast != NULL && fast->next != NULL  ){
        fast = fast->next->next;
        slow = slow->next;

        if(fast == slow){
           
            counter = 1;
            slow = slow->next;
            while(slow == fast){
                counter++;
                slow = slow.next;
            }
        } 
    }
       return counter;
}

q3) Merge two sorted linked list 
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list


solution :

struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){

    // check if any list in null 

    if(list1 == NULL ) return list2;
    if(list2 == NULL ) return list1;
   
    // create tmp and head list

    struct ListNode* tmp = NULL;
    struct ListNode* head = NULL;
    
    // list1 or list2 not equal NULL

    while (list1 || list2)
    {
        // Get head of new ListNode

        if(tmp == NULL)
        {
            if( list1->val < list2->val)
            {
                head = list1;
                tmp = list1;
                list1 = list1->next;
            }
            else{
                head = list2;
                tmp = list2;
                list2 = list2->next;
            }
        }
        // list1 and list2 is true

         else  if( list1 && list2)
        {
                if( list1->val < list2->val)
                    {
                        tmp->next = list1;
                        tmp = tmp->next;      
                        list1 = list1->next;
                    }
                    else
                    {
                        tmp->next = list2;
                        tmp = tmp->next;
                        list2 = list2->next;      
                    }
       }
       // list2 equale NULL and list1 it true

       else if( list1 && list2 == NULL)
       {
           tmp->next = list1;
           break;
       }
       // list1 equale NULL and list2 it true
       else if( list2 && list1 == NULL)
       {
           tmp->next = list2;
           break;
       }
    }
    return head;

}


q4) Linked List Cycle II

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.

solution :

struct ListNode *detectCycle(struct ListNode *head) {
    int counter = 0;
    struct ListNode *fast = head;
    struct ListNode *slow = head;

    while(fast != NULL && fast->next != NULL){
        fast = fast->next->next;
        slow = slow->next;

        if(fast == slow){
          counter = 1;
          struct ListNode* tmp = slow->next;
          while(tmp != slow){
              counter++;
              tmp = tmp->next;
          }

          //step 2;

          struct ListNode* first = head;
          struct ListNode* second = head;

          while(counter > 0 ){
              second = second->next;
              counter--;
          }

          while(first != second){
              first = first->next;
              second = second->next;
          }
          return first;
        }
    }
    return NULL;
}

q5) Happy Number

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

solution :

bool isHappy(int n){
int fast = n;
int slow = n;

do{
slow = square(slow);
fast = square(square(fast));
}while(slow != fast);

return slow==1 ;

}

int square(int n ){
    int ans =0;

    while(n >0){
     int r = n%10;
     ans += r*r;
     n = n/10;
    }
    return ans;
}

q6)
Middle of the Linked List

Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

solution:


struct ListNode* middleNode(struct ListNode* head){

struct ListNode* fast = head;
struct ListNode* slow = head;

while(fast!= NULL && fast->next != NULL){
    fast = fast->next->next;
    slow = slow->next;
}

return slow;

}



q7)  Sort List

Given the head of a linked list, return the list after sorting it in ascending order.

solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* merge(struct ListNode* l1, struct ListNode* l2) {
    if (l1 == NULL) return l2;
    if (l2 == NULL) return l1;

    if (l1->val < l2->val) {
        l1->next = merge(l1->next, l2);
        return l1;
    } else {
        l2->next = merge(l1, l2->next);
        return l2;
    }
}

struct ListNode* sortList(struct ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct ListNode* slow = head;
    struct ListNode* fast = head;
    struct ListNode* prev = NULL;

    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    prev->next = NULL;

    struct ListNode* l1 = sortList(head);
    struct ListNode* l2 = sortList(slow);

    return merge(l1, l2);
}


q8) Reversing a singly linked list

struct ListNode* reverseList(struct ListNode* head){
 struct ListNode* ptr;
    struct ListNode* next;
    struct ListNode* prev;
prev = NULL;
ptr = head;

while(ptr != NULL){
    next = ptr->next;
    ptr->next = prev;
    prev = ptr;
    ptr=next;
}
head = prev;
return head;
}


q9) Palindrome Linked List


Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.


solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 struct ListNode* middle(struct ListNode* head){
    struct ListNode* fast = head;
    struct ListNode* slow = head;

    while(fast != NULL && fast->next != NULL){
        fast = fast->next->next;
        slow = slow->next;
    }

    return slow;
}

struct ListNode* reverse(struct ListNode* head){
     struct ListNode* prev;
     struct ListNode* ptr;
    struct ListNode* next;

     prev = NULL;
   ptr = head;

while(ptr != NULL){
    next = ptr->next;
    ptr->next = prev;
    prev = ptr;
    ptr = next;
}
head = prev;
return head;

}

bool isPalindrome(struct ListNode* head){
//find the middle of linked list 
struct ListNode* mid = middle(head);
//storing the reverse of sub linkedlist [mid , end]
struct ListNode* secondHead = reverse(mid);
//storing for re-reversing (origin form) transformation
struct ListNode* reverseHead = secondHead;

while(head != NULL && secondHead != NULL){
    if(secondHead->val != head->val){
       break;
       
    }
        secondHead = secondHead->next;
        head = head->next;
}
reverse(reverseHead);
if(head == NULL || secondHead == NULL){
    return true;
}

return false;



}


q10) reroder linked list

void reorderList(struct ListNode* head){
   
   struct ListNode* tmp;
   struct ListNode* secondHead = middle(head);
   struct ListNode* hs = reverse(secondHead);
   struct ListNode* hf = head;


   while(hf != NULL && hs != NULL){
       tmp  = hf->next;
       hf->next = hs;
       hf = tmp;
       tmp = hs->next;
       hs->next = hf;
       hs = tmp;
   }

   if(hf != NULL){
       hf->next = NULL;
   }
 
}


q11)
Rotate List

Given the head of a linked list, rotate the list to the right by k places.

solution:

struct ListNode* rotateRight(struct ListNode* head, int k){

if(head == NULL || head->next ==NULL || k<=0){
    return head;
}

struct ListNode* last = head;
int length = 1;
while(last->next != NULL){
    last = last->next;
    length++;
}

last->next = head;
int rotations = k%length ;
int skip = length - rotations;
struct ListNode* newLast = head;
for(int i = 0 ; i< skip-1 ;i++){
newLast = newLast->next;
}
head = newLast->next;
newLast->next = NULL;

return head;
}
